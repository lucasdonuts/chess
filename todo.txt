RIGHT NOW: fixed stack level bug, still need to implement king_in_check
           Game not recognizing checkmate, should be an easy solution
           

Getting enemy moves is causing stack overload after
            a few moves have been made

            Currently have a fresh start on board class
            - Keep get_move piece functions independent of board
              and filter illegal moves in board class
            - ASAP: Either find a way to duplicate board without
              affecting original, or find a way to test if move
              puts king in check without duplicating board
            - Removing location attribute from piece classes may help
            - Try to think of other attributes that may help if
              applied to piece classes
                - ID?
          

Testing game
            Still need to re-work causes_check?
            Retroactively changes passant_pawn variable and probably other things
            Find a way to alter copy without affecting original at all
            Possibly rework
              passant implementation
              destination validation

            moving check deletions to validation method FAIL
            

Add letter and number coordinates to display_board function DONE

Move check_game_state to after display_board on game class

Implement en passant DONE
  Implemented on board, but piece still doesn't recognize legality DONE

Add king in check function DONE

Add castling DONE (Not fully tested)
  Rules: The king and the corresponding rook haven't moved yet
         All spaces between the king and the rook must be empty.
         The king cannot be put in check.
         The squares that the king passes over must not be under attack.

Implement promotions

Implement get move functions DO THIS NEXT FOR ALL PIECES
  Possibly create check_square function to be used with case statement
    case check_square
    when capture
    when friendly
    when empty
  pawn DONE
  knight DONE
  queen DONE
  king
  rook DONE (Except for castling, most likely will be in king class)
  bishop DONE
  update all class move functions to check if move puts king_in_check

Decide if get_moves needs to be tested in board_spec or not

Probably don't need general piece superclass

Add function to check if piece has no moves (no_moves?)

Add menu functionality to input validation
  Help
  Quit
  Save

Refactor Piece classes
  Maybe combine up/down move and left/right move functions
    Rook DONE
    Queen

Refactor board class
  Refactor validation methods to include check_square function

Refactor board tests
  current_players_piece? doesn't need to create player instances or create a variable for piece DONE
  Redundant functions and tests?
    get_white_positions DONE
    get_black_positions DONE
    path_obstructed? DONE
  Properly place and remove new board instances

Refactor piece tests
  Make rook tests more closely resemble bishop with pieces created at 5, 3 and 2, 4
  Possibly pawn tests as well, but probably not needed
  See if it's possible to remove board dependencies with mocks and/or doubles

REMOVE ALL TRASH CODE FROM EVERY FILE
  bishop.rb
  king.rb
  knight.rb
  pawn.rb
  piece.rb
  queen.rb
  rook.rb
  board.rb
  game.rb
  player.rb

  bishop_spec.rb
  board_spec.rb
  game_spec.rb
  king_spec.rb
  knight_spec.rb
  pawn_spec.rb
  piece_spec.rb
  queen_spec.rb
  rook_spec.rb

Right now:
  Starting game loop
  Ask for/validate chosen destination DONE
  Need to finish board's validate move function
    Check if piece has any moves
    Finish all pieces king_in_check? functions
      pawn
      rook
      knight
      bishop
      queen
      king
  Working on board's move_piece function DONE (Not tested for all pieces)
    Put piece at new location
    Set old location to nil
  

Functions just added:
  board.promotion? DONE
  board.promotion_check DONE
  board.promote_piece DONE
  board.check_mate? DONE
  game.game_over DONE
  game.play_again? DONE
  game.reset_game DONE
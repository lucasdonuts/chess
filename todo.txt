RIGHT NOW:  

fix pawn get_captures to include passant openings
  Adding passant_opening branch to check_square function DONE
  then trying to implement it into pawn get_captures DONE
  testing en passant captures DONE (Will continue to test)

May have need for pawn move function to consolidate special cases for pawns

Game not recognizing checkmate, should be an easy solution FIXED

Getting enemy moves is causing stack overload after a few moves have been made FIXED

          

Testing game
            Still need to re-work causes_check?
            Retroactively changes passant_pawn variable and probably other things
            Find a way to alter copy without affecting original at all
            Possibly rework
              passant implementation DONE
              destination validation

            moving check deletions to validation method FAIL
            

Add letter and number coordinates to display_board function DONE

Move check_game_state to after display_board on game class MAYBE NOT

Implement en passant DONE
  Implemented on board, but piece still doesn't recognize legality DONE

Add king in check function DONE

Add castling DONE
  Rules: The king and the corresponding rook haven't moved yet
         All spaces between the king and the rook must be empty.
         The king cannot be put in check.
         The squares that the king passes over must not be under attack.

Implement promotions DONE

Implement get move functions DO THIS NEXT FOR ALL PIECES
  Possibly create check_square function to be used with case statement
    case check_square
    when capture
    when friendly
    when empty
  pawn DONE
  knight DONE
  queen DONE
  king DONE
  rook DONE (Except for castling, most likely will be in king class)
  bishop DONE
  update all class move functions to check if move puts king_in_check

Decide if get_moves needs to be tested in board_spec or not

Probably don't need general piece superclass WRONG

Add function to check if piece has no moves (no_moves?) DONE

Add menu functionality to input validation LAST
  Help
  Quit
  Save

Refactor Piece classes
  Maybe combine up/down move and left/right move functions
    Rook DONE
    Queen DONE

Refactor board class
  Refactor validation methods to include check_square function

Refactor board tests
  current_players_piece? doesn't need to create player instances or create a variable for piece DONE
  Redundant functions and tests?
    get_white_positions DONE
    get_black_positions DONE
    path_obstructed? DONE
  Properly place and remove new board instances

Refactor piece tests
  Make rook tests more closely resemble bishop with pieces created at 5, 3 and 2, 4
  Possibly pawn tests as well, but probably not needed
  See if it's possible to remove board dependencies with mocks and/or doubles

REMOVE ALL TRASH CODE FROM EVERY FILE
  bishop.rb
  king.rb
  knight.rb
  pawn.rb
  piece.rb
  queen.rb
  rook.rb
  board.rb
  game.rb
  player.rb

  bishop_spec.rb
  board_spec.rb
  game_spec.rb
  king_spec.rb
  knight_spec.rb
  pawn_spec.rb
  piece_spec.rb
  queen_spec.rb
  rook_spec.rb